<?xml version="1.0" encoding="utf-8"?>
<#assign className = table.className>   
<#assign classNameFirstLower = className?uncap_first>
<#assign underscoreName = table.underscoreName/>
<#assign classNameLowerCase = className?lower_case/>

<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:sf="http://www.spicefactory.org/parsley"
		 xmlns:pagging="com.wai.components.*"
		 xmlns:${className}="${basepackage}.${underscoreName}.view.*">

	<s:layout>

		<s:BasicLayout/>
	</s:layout>
	
	<fx:Metadata>
		[ManagedEvents("list${className}Event,delete${className}Event")]
	</fx:Metadata>
	
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<sf:Configure/>
	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			<#include "/actionscript_imports.include"/>		
			import com.wai.components.events.PaginateEvent;
			import mx.collections.ArrayCollection;
			import mx.managers.PopUpManager;		
			import org.spicefactory.parsley.core.context.Context;
			
			[Inject]
			public var context:Context; //注入IOC上下文
				
			[Inject(id="${classNameFirstLower}Model")]
			[Bindable]
			public var ${classNameFirstLower}Model:${className}Model;
			
			[Bindable]
			public var ${classNameFirstLower}:${className}=new ${className}(); //选中的对象
			
			[Init]
			public function pageLoad():void
			{
				//当前的视图已经完成依赖注入，可以放心使用带[Inject]注解的对象实例
				search(1);
			}
			
			public function pageChangeHandler(e:PaginateEvent):void
			{
				search(e.index + 1);
			}
			
			public function search(pageNumber:int=1):void
			{
				if (!${classNameFirstLower}QueryPanel.validate())
				{
					return;
				}
				${classNameFirstLower}QueryPanel.query.page=pageNumber;
				dispatchEvent(new List${className}Event(${classNameFirstLower}QueryPanel.query));
			}
			
			public function del():void
			{
				AppCrudUtils.confirmDelete(${classNameFirstLower}Grid.getSelectedList(), function():void
					{
						var idList:ArrayCollection=CollectionUtils.select(${classNameFirstLower}Grid.getSelectedList().createCursor(), '${classNameFirstLower}Id');
						dispatchEvent(new Delete${className}Event(idList.toArray()));
					});
			}
			

			//对popView的注入
			public function newRecord():void
			{
				var win:${className}DetailWindow=new ${className}DetailWindow();
				context.viewManager.addViewRoot(win); //让上下文管理view
				PopUpManager.addPopUp(win, this);
				win.${classNameFirstLower}=new ${className}();//。。。可以为表单对象添加默认属性
				win.currentState="new";
			}


			public function edit(event:Event):void
			{
				if(event.target.data is ${className}) { 
					var win:${className}DetailWindow=new ${className}DetailWindow();
					context.viewManager.addViewRoot(win); //让上下文管理view
					PopUpManager.addPopUp(win, this);
					win.${classNameFirstLower} = event.target.data;
					win.currentState = "edit";
				}
			}
		]]>
	</fx:Script>

	<s:VGroup width="100%"
			  height="100%">
		<mx:Text text="${className}"
				 styleName="moduleTitle"/>

		<${className}:${className}QueryPanel id="${classNameFirstLower}QueryPanel"
								   styleName="detailForm"
								   width="100%"
								   enter="search()"/>

		<s:HGroup height="35"
				  styleName="crudToolBar"
				  width="100%"
				  verticalAlign="middle"
				  horizontalAlign="right"
				  x="10"
				  y="168">

			<mx:Spacer/>
			<s:Button id="${classNameFirstLower}_search"
					  label="Search"
					  styleName=""
					  click="search()"/>

			<mx:Spacer width="100%"/>

			<s:Button id="${classNameFirstLower}_new"
					  label="New Record"
					  styleName=""
					  click="newRecord()"/>

			<s:Button id="${classNameFirstLower}_delete"
					  label="Delete Record"
					  styleName=""
					  click="del()"/>
			<mx:Spacer/>

		</s:HGroup>
		<${className}:${className}Grid id="${classNameFirstLower}Grid"
							 doubleClickEnabled="true"
							 doubleClick="edit(event)"
							 change="${classNameFirstLower}=${classNameFirstLower}Grid.selectedItem as ${className}"
							 dataProvider="{${classNameFirstLower}Model.page.result}"
							 width="100%"
							 height="100%"/>

		<s:HGroup>

			<pagging:WAIPaginator id="paginator"
								  itemsPerPage="{PageQuery.DEFAULT_PAGE_SIZE}"
								  rangeCount="{10}"
								  itemsTotal="{${classNameFirstLower}Model.page.totalCount}"
								  selectedIndex="0"
								  pageChange="pageChangeHandler(event)"/>
			<mx:Text id="resultsIndicator"
					 text="{'结果记录:' + ${classNameFirstLower}Model.page.thisPageFirstElementNumber+ ' - ' +${classNameFirstLower}Model.page.thisPageLastElementNumber + ' of ' + ${classNameFirstLower}Model.page.totalCount}" />
		</s:HGroup>
	</s:VGroup>

</s:Group>

= 通过SQL语句生成代码 =

我们通过一个实际的例子来演示使用,通过一个Sql查询生成ibatis的SqlMap及Dao.java
API使用:
{{{
public void test_generate_by_sql() throws Exception {
	Sql sql = SqlFactory.parseSql("select * from user_info where username=#username# and password=#password#");
	sql.setTableSqlName("user_info");
	sql.setMultiPolicy("many");  //many or one,用于控制查询结果是one,many
	sql.setOperation("findByUsernameAndPassword"); 
	sql.setRemarks("根据用户名及密码进行查询");
	new GeneratorFacade().generateBySql(sql, "generator/test/for_test_select_sql");
}
}}}
可以根据以上提供的API封装出各种使用方法,如 *eclipse插件* , *swing查询界面*

= 生成的代码 =
==UserInfoDAO==
{{{
/**
* 根据用户名及密码进行查询
* sql: select * from user_info where username=? and password=?
*/
@SuppressWarnings("unchecked")
public List<UserInfo> findByUsernameAndPassword(String username ,String password ) {
	Map<String,Object> param = new HashMap<String,Object>();
	param.put("username",username);
	param.put("password",password);
	return (List<UserInfo>)getSqlMapClientTemplate().queryForList("findByUsernameAndPassword",param);
}
}}}
==UserInfoSqlMap.xml==
{{{
<select id="UserInfo.findByUsernameAndPassword" resultMap="RM-UserInfo" >
    <![CDATA[
	select USER_ID,USERNAME,PASSWORD,BIRTH_DATE,SEX,AGE 
	from user_info 
	where username=#username# and password=#password#
    ]]>
</select>
}}}

=相对应的生成器模板=
==${tableClassName}Dao.java==
{{{
	/**
	 * ${sql.remarks!}
	 * sql: ${sql.executeSql}
	 */
	@SuppressWarnings("unchecked")
	public <@generateResultClassName/> ${sql.operation}(<#list sql.params as param>${param.preferredParameterJavaType} ${param.paramName} <#if param_has_next>,</#if></#list>) {
		Map<String,Object> param = new HashMap<String,Object>();
		<#list sql.params as param>
		param.put("${param.paramName}",${param.paramName});
		</#list>
	<#if sql.selectSql>
		<#if sql.multiPolicy = 'one'>
		return (<@generateResultClassName/>)getSqlMapClientTemplate().queryForObject("${sql.operation}",param);
		<#else>
		return (<@generateResultClassName/>)getSqlMapClientTemplate().queryForList("${sql.operation}",param);
		</#if>
	</#if>
	<#if sql.deleteSql>
		return getSqlMapClientTemplate().delete("${sql.operation}", param);
	</#if>
	<#if sql.insertSql>
		return getSqlMapClientTemplate().insert("${sql.operation}", param);    
	</#if>
	<#if sql.updateSql>
		return getSqlMapClientTemplate().update("${sql.operation}", param);
	</#if>	
	}

<#macro generateResultClassName>
	<#compress>
	<#if sql.selectSql>
		<#if sql.multiPolicy = 'one'>
			${sql.resultClassName}
		<#else>
			List<${sql.resultClassName}>
		</#if>
	<#else>
		int
	</#if>
	</#compress>
</#macro>
}}}
==${tableClassName}SqlMap.xml==
{{{
<#macro namespace>${sql.tableClassName}.</#macro>
	
<#if sql.selectSql>
	<#if sql.columnsCount == 1>
	<select id="<@namespace/>${sql.operation}" resultMap="${sql.resultClassName}" >
    <![CDATA[
	${sql.ibatisSql}
    ]]>
	</select>	
	<#else>
	
	<#if !sql.columnsInSameTable>
	<resultMap id="RM-${sql.resultClassName}" class="${sql.resultClassName}">
    <#list sql.columns as column>
		<result property="${column.columnNameFirstLower}" column="${column.sqlName}"/>
    </#list>
	</resultMap>
	</#if>
	
	<select id="<@namespace/>${sql.operation}" resultMap="RM-${sql.resultClassName}" >
    <![CDATA[
	${sql.ibatisSql}
    ]]>
	</select>	  	
	</#if>
    
</#if>
	
<#if sql.updateSql>
	<update id="UserInfo.update">
    <![CDATA[
	${sql.ibatisSql}
    ]]>
	</update>
</#if>
	
<#if sql.deleteSql>
	<delete id="UserInfo.delete">
    <![CDATA[
	${sql.ibatisSql}
    ]]>
    </delete>
</#if>
}}}

==${tableClassName}SqlMap.xml==
{{{
<#macro namespace>${sql.tableClassName}.</#macro>
	
<#if sql.selectSql>
	<#if sql.columnsCount == 1>
	<select id="<@namespace/>${sql.operation}" resultMap="${sql.resultClassName}" >
    <![CDATA[
	${sql.ibatisSql}
    ]]>
	</select>	
	<#else>
	
	<#if !sql.columnsInSameTable>
	<resultMap id="RM-${sql.resultClassName}" class="${sql.resultClassName}">
    <#list sql.columns as column>
		<result property="${column.columnNameFirstLower}" column="${column.sqlName}"/>
    </#list>
	</resultMap>
	</#if>
	
	<select id="<@namespace/>${sql.operation}" resultMap="RM-${sql.resultClassName}" >
    <![CDATA[
	${sql.ibatisSql}
    ]]>
	</select>	  	
	</#if>
    
</#if>
	
<#if sql.updateSql>
	<update id="UserInfo.update">
    <![CDATA[
	${sql.ibatisSql}
    ]]>
	</update>
</#if>
	
<#if sql.deleteSql>
	<delete id="UserInfo.delete">
    <![CDATA[
	${sql.ibatisSql}
    ]]>
    </delete>
</#if>
}}}
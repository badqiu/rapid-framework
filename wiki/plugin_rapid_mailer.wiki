= 邮件发送Mailer插件 =

本插件模仿之ruby on rails的actionmailer,但有提升,请查看特性.

适用于一般项目的邮件发送需求

本插件预计rapid-framework-v3.0发布

=Mailer特性=
  # 使用AsyncJavaMailSender启动线程池可以异步发送邮件并通过[http://badqiu.javaeye.com/blog/461089 AsyncToken]得到发送结果。
  # 使用freemarker模板语言生成邮件内容

=新建Mailer使用规范=
{{{
 1. 包名: 放在mailer包内,如com.company.project.mailer
 2. 类名: 以Mailer结尾,如UserMailer
 3. 方法名: 
 	使用UserMailer.createXXXX()来创建邮件消息,如UserMailer.createConfirmMail(args)
 	使用UserMailer.sendXXXX()来发送邮件,如UserMailer.sendConfirmMail(args)
 4.必须继承之BaseMailer(注：BaseMailer只是组合各个组件，并未包含其它功能)
}}}


=邮件发送使用实例=
{{{
@Component
public class OrderMailer extends BaseMailer{
	/**
	 * 使用freemarker模板创建邮件消息
	 */
	public MimeMessagePreparator createConfirmOrder(String username) {
		SimpleMailMessage msg = newSimpleMsgFromTemplate("subject");
		msg.setTo("badqiu@gmail.com");
		
		final Map model = new HashMap();
		model.put("username", username);
		String text = getFreemarkerTemplateProcessor().processTemplate("confirmOrder.flt", model);
		msg.setText(text);
		
		//转换为html邮件
		return MailMessageUtils.toHtmlMsg(msg);
	}
	
	/**
	 * 发送邮件
	 */
	public void sendConfirmOrder(final String username) {
		final MimeMessagePreparator msg = createConfirmOrder(username);
		AsyncToken token = asyncJavaMailSender.send(msg);
		
		//处理邮件发送结果
		token.addResponder(new IResponder() {
			public void onFault(Exception fault) {
				System.out.println("[ERROR] confirmOrder mail send fail,cause:"+fault);
			}
			public void onResult(Object result) {
				System.out.println("[INFO] confirmOrder mail send success");
			}
		});
	}
}
}}}

==配置文件applicationContext-mail.xml==
{{{
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd"
    default-autowire="byName" default-lazy-init="false">

	<bean id="simpleMailMessageTemplate" class="org.springframework.mail.SimpleMailMessage">
		<property name="from" value="rapidframework@sohu.com"></property>
	</bean>
	
	<!-- 正常的普通邮件发送器 -->
	<bean id="javaMailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="smtp.sohu.com" />
		<property name="username" value="rapidframework@sohu.com" />
		<property name="password" value="123456" />
		<property name="defaultEncoding" value="GBK" />
		
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">true</prop>
			</props>
		</property>
	</bean>

	<!-- 异步的邮件发送器 -->
	<bean id="asyncJavaMailSender" class="cn.org.rapid_framework.mail.AsyncJavaMailSender">
		<!-- 邮件发送的线程池大小 -->
		<property name="sendMailThreadPool" value="3" />
		<property name="javaMailSender" ref="javaMailSender" />
        </bean>

	<!-- freemarker模板相关配置 START -->
	<bean id="freemarkerConfiguration" class="org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean">
		<property name="templateLoaderPath" value="classpath:/email_template" />
	</bean>
	
	<bean id="freemarkerTemplateProcessor" class="cn.org.rapid_framework.freemarker.FreemarkerTemplateProcessor">
		<property name="freemarkerConfiguration" ref="freemarkerConfiguration" />
	</bean>
	<!-- freemarker模板相关配置 END -->
	
	<!-- AsyncTokenTempalte可以用于指定默认的responders -->
	<bean id="asyncTokenTemplate" class="cn.org.rapid_framework.util.concurrent.async.AsyncTokenTemplate">
		<property name="responders">
			<list></list>
		</property>
	</bean>
	
	<!-- component-scan自动搜索@Component , @Controller , @Service , @Repository等标注的类 -->
	<context:component-scan base-package="com.**.mailer"/>
	
</beans>
}}}
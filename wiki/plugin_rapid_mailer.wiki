#summary One-sentence summary of this page.

= 邮件发送Mailer =

本插件模仿之ruby on rails的actionmailer,但有提升,请查看特性.

本插件预计rapid-framework-v3.0发布

=Mailer特性=
  # 使用AsyncJavaMailSender启动线程池可以异步发送邮件并通过[http://badqiu.javaeye.com/blog/461089 AsyncToken]得到发送结果。
  # 使用freemarker模板语言生成邮件内容

=新建Mailer使用规范=
{{{
 1. 包名: 放在mailer包内,如com.company.project.mailer
 2. 类名: 以Mailer结尾,如UserMailer
 3. 方法名: 
 			使用UserMailer.createXXXX()来创建邮件消息,如UserMailer.createConfirmMail()
 			使用UserMailer.sendXXXX()来发送邮件,如UserMailer.sendConfirmMail()
 4.必须继承之BaseMailer,BaseMailer只是组合各个组件，并未包含其它功能
}}}


=邮件发送使用实例=
{{{
	/**
	 * 使用freemarker模板创建邮件消息
	 */
	public MimeMessagePreparator createConfirmOrder(String username) {
		SimpleMailMessage msg = newSimpleMsgFromTemplate("subject");
		msg.setTo("badqiu@gmail.com");
		
		final Map model = new HashMap();
		model.put("username", username);
		String text = getFreemarkerTemplateProcessor().processTemplate("confirmOrder.flt", model);
		msg.setText(text);
		
		//转换为html邮件
		return MailMessageUtils.toHtmlMsg(msg);
	}
	
	/**
	 * 发送邮件
	 */
	public void sendConfirmOrder(final String username) {
		final MimeMessagePreparator msg = createConfirmOrder(username);
		AsyncToken token = asyncJavaMailSender.send(msg);
		
		//处理邮件发送结果
		token.addResponder(new IResponder() {
			public void onFault(Exception fault) {
				System.out.println("[ERROR] confirmOrder mail send fail,cause:"+fault);
			}
			public void onResult(Object result) {
				System.out.println("[INFO] confirmOrder mail send success");
			}
		});
	}
}}}
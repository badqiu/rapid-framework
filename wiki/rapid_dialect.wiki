<wiki:toc max_depth="2" />
=介绍=
rapid中的dialect主要目的是用于分页，代码完全抄录自hiberante,但只精简出分页部分
适用于jdbc或是iBatis.

== 分页Dialect接口==

{{{
public interface Dialect {

    public boolean supportsLimit();

    public String getLimitString(String sql, int offset, int limit);
 
    public boolean supportsLimitOffset();
    
}
}}}

==Mysql的Dialect实现==
{{{
public class MySQLDialect implements Dialect{
    public boolean supportsLimitOffset(){
	return true;
    }
    public boolean supportsLimit() {   
        return true;   
    }  
    public String getLimitString(String sql, int offset, int limit) {   
        if (offset > 0) {   
        	return sql + " limit "+offset+","+limit; 
        } else {   
            return sql + " limit "+limit;
        }   
    }   
}
}}}

==Jdbc的分页实现==
{{{
public Page pageQuery(String sql, Map paramMap,final int totalCount, int pageSize, int pageNumber) {
	//支持limit子句
	if(dialect.supportsLimit()) {
		//支持limit及offset.则数据使用数据库分页
		if(dialect.supportsLimitOffset()) {
			Page page = new Page(pageNumber,pageSize,totalCount);
			String limitSql = dialect.getLimitString(sql,page.getFirstResult(),pageSize);
			List list = getNamedParameterJdbcTemplate().query(limitSql, paramMap, new BeanPropertyRowMapper(getEntityClass()));
			page.setResult(list);
			return page;
		}else {
			//不支持offset,则使用游标配合limit分页
			String limitSql = dialect.getLimitString(sql, 0, pageSize);
			return getJdbcScrollPage(pageNumber,pageSize, limitSql,paramMap,totalCount);
		}
	}else {
		//不支持limit子句,使用游标分页
		return getJdbcScrollPage(pageNumber,pageSize, sql,paramMap,totalCount);			
	}
}
}}}

=存在的问题=
现在分页参数没有使用疑问号 *占位符"?"* ,所以在如oracle这种数据库,会影响性能.
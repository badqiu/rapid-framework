= 最佳实践 =

== 尽量删除没用的东西 ==

生成器帮你生成的东西有时你是并不需要的,如一张表只有查看,而没有增删改功能,那么你应该将edit.jsp,create.jsp等无用的东西删除,UserAction.save(),UserAction.edit()等方法也都删除,只保留需要的东西,以保持代码的整洁.避免后来者在这些无用东西上产生不必要的误解而增加维护成本.

== 一个项目一套生成器模板 ==
  # 因为各个项目的UI都有可能是不一样的,而UI模板也可能需要根据不同项目要进行不同的定制,所以你的项目需要自带一套模板.而Dao,Service等模板则可以通用.
  # 你可能会有一个自己的脚手架及公共的模板,并且会持续修改.但是由于现在使用生成器的项目已经在开发,当前项目使用的模板很有可能赶不上你自己的公共脚手架中的模板修改.所以项目通常自带一套模板并持续维护.

== 拒绝重复生成代码的诱惑 ==
本人实践,代码只生成一次,后面全部是手写代码. 初始生成的代码已经可以为你减轻很大的工作量.
  # 如果你陷入要重复生成,势必为造成模板复杂,后期会难以维护.
  # DAO层以上代码重复生成一点意义也没有,只是帮你生成一个骨架,自己再填空编写业务逻辑
  # 后台的话可以直接生成UI页面,生成一次以后自己就手工编辑,页面千变成化,只能适应一般需求,没有万能的模板适应所有需求.

== 构建你自己的脚手架 ==
因为rapid是一个更加通用的脚手架(dao层，web层都可切换不同组件),因而也限制其现在的发展，而你可以构建属于自己的项目脚手架(如spring_rest+spring_jdbc+freemarker),这样就不用考虑过多的项目组合，并可以集中精力只搞好一个项目组合。
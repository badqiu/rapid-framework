集成gmaven,使用groovy替换现在的 ant build http://docs.codehaus.org/display/GMAVEN/Executing+Groovy+Code
rename repid-generator-ext => tableconfig
#${className^lower_case^replace('1','2')}
#支持 some.zip及 some.zip!/sub_folder
性能需要提升,因为没有使用数据库连接池
增加删除临时文件夹的功能
String url = "jdbc:h2:mem;INIT=RUNSCRIPT FROM '~/create.sql'\\;RUNSCRIPT FROM '~/populate.sql'";
支持GeneratorProperties templateRoots=classpath:generator/template/rapid/table,generator/template/rapid/clazz
使用Groovy mixin增加 Column属性
使用 GeneratorBeanFactory 用于创建 Column,JavaMethod等对象以便扩展
应该将 vo.${className}Query移至dao层
为Column增加读取属性,如is_autoincrement,以便生成主键
dalgen生成器增加乐观锁的支持

project-web-war					    	包含 web.xml等配置，并且依赖所有web项目,只有这个项目有 web.xml
	project-web-home                  	公共的web模块
		project-web-module1             web模块1,依赖于web-home
		project-web-module2             web模块2,依赖于web-home
	project-service-shared            		公共的业务逻辑
		project-service-module1           	业务逻辑模块1
		project-service-module2           	业务逻辑模块2
			project-common-service-integration      facade层,引用的外部服务
			project-common-util               		util工具层
			project-common-dao                		dao层
	
project-common-service-facade-impl      common-service-facade实现(是否需要这个,可否分散在各个包中
	project-service-shared            		公共的业务逻辑
		project-service-module1           	业务逻辑模块1
		project-service-module2           	业务逻辑模块2
			project-common-service-integration      facade层,引用的外部服务
			project-common-util               		util工具层
			project-common-dao                		dao层	
			project-common-service-facade           facade层,提供外部服务


在POM 4中，<dependency>中还引入了<scope>，它主要管理依赖的部署。目前<scope>可以使用5个值： 
    * compile，缺省值，适用于所有阶段，会随着项目一起发布。 
    * provided，类似compile，期望JDK、容器或使用者会提供这个依赖。如servlet.jar。 
    * runtime，只在运行时使用，如JDBC驱动，适用运行和测试阶段。 
    * test，只在测试时使用，用于编译和运行测试代码。不会随项目发布。 
    * system，类似provided，需要显式提供包含依赖的jar，Maven不会在Repository中查找它。 
                               
alipay dalgen兼容性
	#1. 继承的PageQuery必须是与包名无关的
	2. 自动复数转换关闭
	#3. PageList应该支持范型
	#4. 增加 PageQueryUtils的 import
	#4. module-sqlmap-config.xml 必须删除Money: <typeHandler javaType="com.iwallet.biz.common.util.money.Money" callback="com.alipay.common.ibatis.typehandler.MoneyTypeHandler"/>
	5. common-sqlmap-mapping.xml 必须删除Money	
	#6. 提供一个java_imports.include,共享需要引用的import
	#7. dalgen config的DTD必须使用 rapid的DTD: ibatis-table-config-1.0.xml
	8. gen.groovy中的encoding从GBK=>UTF-8
	
ibatis gen的include sql的参数重用功能.
	1. 得到这条sql重用了几段 segment
	2. 识别segment中的所有参数列表,得到 SegmentId{ params 对象 }
	3. 根据原始的sql得到 SegementId params参数的类型
	4. 生成Segment对应的类: 
		UserInfoWhere.java
		PayTypeWhere.java
	5. 移除 Sql中SegmentId的param列表 (问题没有解决: 多个where会重复使用一个paramName,冲突怎么解决?)
	6. 在Sql Param对象中生成 SegmentId参数的(1.代理 2.或者是继承) 如果参数为空,则不生成Segment class
		QueryByUser{
			private UserInfoWhere userInfoWhere = new UserInfoWhere();
			setUserInfoWhere(userInfoWhere) {
				this.userInfoWhere = userInfoWhere;
			}
			getUsername() {
				userInfoWhere.getUsername();
			}
			getPassword() {
				userInfoWhere.getPassword();
			}
			public void setUsername(String username) {
				userInfoWhere.setUsername(username);
			}
		}
		
		并且为代理生成构造方法.

Result的select column也通过 include生成.
	1. 通过正则表达式得到 select columns from的 columns
	2. 得到 columns中的所有 include段
	3. 得到各个具体 include 所代表的 columns(怎么取呢?正则表达式不大可能完成)
			
	
Logger是否考虑使用freemarker logger,或者是支持new GLogger(class)

在模板的开始位置: 需要注明模板引用的变量声明: <#-- $import cn.rapid.Table -->			



1. Mybatis生成器及 dal生成器
2. 进入maven中央仓库
3. maven + groovy 基本替换maven + ant构建(maven需要自定义的部分可以用groovy)
5. 引用 @IsPermitted annotation for security, 并且增加 SecurityChecker.isPermitted("some permission") 直接抛异常的方式
Cache接口抽象
	6. cache抽象层
	4. 引用 @MethodCache annotation做方法缓存
7. 全 static模式,类似 SpringContextHolder,搞 ,,ConfigHolder将这些底层服务当做 static方法调用
	CacheHodler cache
	ValidatorHodler 持有 hibernate validator
	ConfigHolder 持有系统配置,用于系统参数的动态刷新
mybaits 不使用Map,应该使用强类型的QueryObject查询


将 mapper及sqlmap迁移至 src/main/resources/(mapper|sqlmap)


dalgen需要修正返回值为long时，无法自动转换值为long类型: 重现错误: <entry key="java_typemapping.java.lang.Long">long</entry>
	public long userParameterObject(String tradeNo) throws DataAccessException {
		return (Number)getSqlMapClientTemplate().queryForObject("project.TradeBase.userParameterObject",tradeNo);
	}

	
	
springmvc数据绑定时:  Failed to convert property value of type java.lang.String to required type java.lang.Integer for property age; nested exception is org.springframework.core.convert.ConversionFailedException: Unable to convert value "9999999999" from type java.lang.String to type java.lang.Integer; nested exception is java.lang.NumberFormatException: For input string: "9999999999"


为WebService调用的Request+Result+Exception增加Map extendedData用于存放通用的扩展数据. 这样 traceId就可以通过这个传递.
	或者可以通过Soap Header, Http Header来传递
	CXF使用拦截器向SOAPHeader中添加用户自定义信息 http://kingoblog.appspot.com/2009/04/24/cxfsoapheader.html

增加 DistributedThreadLocal(应用场景:分布式MDC traceId,分布式sessionId,分布式安全登陆


集成 http://www.jasypt.org/encrypting-configuration.html 用于 spring application.properties的加密


抛出: ModelAndViewDefiningException可以直接返回一个 ModelAndView对象

ManagerTest使用mock测试
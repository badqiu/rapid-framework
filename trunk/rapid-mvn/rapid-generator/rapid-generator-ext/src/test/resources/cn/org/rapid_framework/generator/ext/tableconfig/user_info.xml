<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE table SYSTEM "rapid-ibatis-table-config.dtd">
<table sqlname="user_info" package="com.company.project.user_info" dummypk="user_id" sequence="SEQ_BBCC_CUSTOMER" autoswitchdatasrc="false" remarks="用户信息表">
	<column name="age" javatype="com.iwallet.biz.common.util.money.Money" />
	<column name="sex" javatype="com.iwallet.biz.common.util.money.Money" />
	
	<resultmap name="RM.BLOG">
		<column javatype="int" name="rage"/>
		<column javatype="long" name="rsex"/>
		<column javatype="Long" name="rdiy"/>
		<column javatype="String" name="abc_content"/>
	</resultmap>
	
	<!-- 新增一条交易资金单据记录 -->
	<operation name="insert" paramtype="object" >
		<extraparams>
		    <param name="startRow" javatype="int"/>
		    <param name="pageSize" javatype="int"/>
		</extraparams>	
		<sql>
				INSERT INTO user_info (user_id,username,password) values (#user_id#,#username#,#password#)
			<selectKey resultClass="java.lang.Long" type="post" keyProperty="user_id" >
            select last_insert_id() from any
    		</selectKey>
		</sql>
	</operation>

	<operation name="insertWithFunction" paramtype="object" >
		<extraparams>
		    <param name="startRow" javatype="int"/>
		    <param name="pageSize" javatype="int"/>
		</extraparams>	
		<sql>
			INSERT INTO user_info (age,username,password,birth_date,sex,user_id) values ('23',#username#,?,curdate(),'12','123111')
			<selectKey resultClass="java.lang.Long" type="post" keyProperty="user_id" >
            select last_insert_id() from any
    		</selectKey>
		</sql>
	</operation>
	
	<operation name="update" paramtype="object" remarks="更新一条交易资金单据记录 ">
		<sql>
			UPDATE user_info SET username = #username#,password = #password#
			WHERE username = #username#
		</sql>
	</operation>	
	
	<operation name="queryByUserId" paramtype="primitive" multiplicity="one" remarks="根据订单号查询订单">
		<sql>
			select *
			from user_info
			where user_id = #userId#
		</sql>
	</operation>	

	<operation name="countUsername" paramtype="primitive" multiplicity="one" remarks="根据订单号查询订单">
		<sql>
		<![CDATA[
			select count(username) username_cnt,sum(age) sum_age
			from user_info
			where user_id = #userId# and age = #age# and sex = #sex# and username > #maxUsername# and username &lt; #minUsername#
		]]>			
		</sql>
	</operation>

	<operation name="countDynimicUsername" paramtype="primitive" multiplicity="one" remarks="根据订单号查询订单">
		<sql>
		<![CDATA[
			select count(username) username_cnt,sum(age) sum_age
			from user_info
			where user_id = #userId# and age = #age# and sex = #sex# and username > #maxUsername# and username &lt; #minUsername#
		]]>
		</sql>
	</operation>

	<operation name="insertWithSelectKey" paramtype="primitive" multiplicity="one" remarks="根据订单号查询订单">
	<sql>
	    <![CDATA[
	        INSERT INTO USER_INFO (
	        	USER_ID ,
	        	USERNAME ,
	        	PASSWORD ,
	        	BIRTH_DATE ,
	        	SEX ,
	        	AGE 
	        ) VALUES (
	        	#userId# ,
	        	#username# ,
	        	#password# ,
	        	#birthDate# ,
	        	#sex# ,
	        	#age# 
	        )
	    ]]>
	    	<!--
		    mysql:		type="post" SELECT  select last_insert_id()
		    sqlserver:	type="post" SELECT  @@identity  AS  ID
		    oracle:		type="pre" 	SELECT  sequenceName.nextval AS ID FROM DUAL
		    DB2:		type="pre"	values nextval for sequenceName
		    -->
	    <!-- 
	        <selectKey resultClass="java.lang.Long" type="post" keyProperty="userId" >
	            select last_insert_id()
	        </selectKey>  
	     -->
        </sql>
        
    </operation>

	<operation name="update" paramtype="primitive" multiplicity="one" remarks="根据订单号查询订单">
	<sql>
    <![CDATA[
        UPDATE USER_INFO SET
	        USERNAME = #username# ,
	        PASSWORD = #password# ,
	        BIRTH_DATE = #birthDate# ,
	        SEX = #sex# ,
	        AGE = #age# 
        WHERE 
	        USER_ID = #userId# 
    ]]>
    </sql>
    </operation>

	<operation name="delete" paramtype="primitive" multiplicity="one" remarks="根据订单号查询订单">
    <sql>
    <![CDATA[
        DELETE FROM USER_INFO WHERE
        USER_ID = #userId# 
    ]]>
    </sql>
    </operation>
    
    <operation name="getById" paramtype="primitive" multiplicity="one" remarks="根据订单号查询订单">
    <sql>
	    SELECT USER_ID ,USERNAME ,PASSWORD ,BIRTH_DATE ,SEX ,AGE 
	    <![CDATA[
	        FROM USER_INFO 
	        WHERE 
		        USER_ID = #userId# 
	    ]]>
    </sql>
    </operation>

	<operation name="findPage.count" paramtype="primitive" multiplicity="one" remarks="根据订单号查询订单">
		<sql>
		<![CDATA[
        SELECT count(*) FROM USER_INFO
	    <dynamic prepend="WHERE">
		       <isNotEmpty prepend="AND" property="userId">
		             USER_ID = #userId#
		       </isNotEmpty>
		       <isNotEmpty prepend="AND" property="username">
		             USERNAME = #username#
		       </isNotEmpty>
		       <isNotEmpty prepend="AND" property="password">
		             PASSWORD = #password#
		       </isNotEmpty>
		       <isNotEmpty prepend="AND" property="birthDateBegin">
		             BIRTH_DATE &gt;= #birthDateBegin#
		       </isNotEmpty>
		       <isNotEmpty prepend="AND" property="birthDateEnd">
		             BIRTH_DATE &lt;= #birthDateEnd#
		       </isNotEmpty>
		       <isNotEmpty prepend="AND" property="sex">
		             SEX = #sex#
		       </isNotEmpty>
		       <isNotEmpty prepend="AND" property="age">
		             AGE = #age#
		       </isNotEmpty>
	    </dynamic>
	    ]]>
	    </sql>        
    </operation>
    
    <operation name="findPage" paging="true" paramtype="primitive" multiplicity="one" remarks="根据订单号查询订单">
    	<sql>
    	<![CDATA[
    	SELECT USER_ID ,USERNAME ,PASSWORD ,BIRTH_DATE ,SEX ,AGE FROM USER_INFO 
	    <dynamic prepend="WHERE">
		       <isNotEmpty prepend="AND" property="userId">
		             USER_ID = #userId#
		       </isNotEmpty>
		       <isNotEmpty prepend="AND" property="username">
		             USERNAME = #username#
		       </isNotEmpty>
		       <isNotEmpty prepend="AND" property="password">
		             PASSWORD = #password#
		       </isNotEmpty>
		       <isNotEmpty prepend="AND" property="birthDateBegin">
		             BIRTH_DATE >= #birthDateBegin#
		       </isNotEmpty>
		       <isNotEmpty prepend="AND" property="birthDateEnd">
		             BIRTH_DATE &lt;= #birthDateEnd#
		       </isNotEmpty>
		       <isNotEmpty prepend="AND" property="sex">
		             SEX = ?
		       </isNotEmpty>
		       <isNotEmpty prepend="AND" property="age">
		             AGE = ?
		       </isNotEmpty>
		       <isNotEmpty prepend="AND" property="includeAges">
		     		age in	
		    		<iterate open="(" close=")" conjunction="," property="includeAges">
	    				#includeAges[]#
	    			</iterate>
			   </isNotEmpty>
		       <isNotEmpty prepend="AND" property="orIncludeAges">
		    		<iterate open="(" close=")" conjunction="OR" property="orIncludeAges">
	    				age = #orIncludeAges[]#
	    			</iterate>
			   </isNotEmpty>			       
	    </dynamic>
	    <isNotEmpty prepend="ORDER BY" property="orderBy">
		      #orderBy#
		</isNotEmpty>
		]]>
		</sql>
    </operation>
	
	<operation name="getByUsername" paramtype="primitive" multiplicity="one" remarks="根据订单号查询订单">
		<sql>
	    <![CDATA[
	    SELECT USER_ID ,USERNAME ,PASSWORD ,BIRTH_DATE ,SEX ,AGE 
	        FROM USER_INFO WHERE USERNAME = #username#
	    ]]>
	    </sql>
    </operation>
    
    <operation name="getByAge" paramtype="primitive" multiplicity="one" remarks="根据订单号查询订单">
    	<sql>
	    <![CDATA[
	    SELECT USER_ID ,USERNAME ,PASSWORD ,BIRTH_DATE ,SEX ,AGE 
	        FROM USER_INFO WHERE AGE = #age#  
	    ]]>
	    </sql>
    </operation>

    <operation name="subSelectNotOrderBy" paramtype="primitive" multiplicity="one" remarks="根据订单号查询订单">
    	<sql>
	    <![CDATA[
	    SELECT USER_ID ,USERNAME ,PASSWORD ,BIRTH_DATE ,SEX ,AGE 
	        FROM USER_INFO WHERE 
	        AGE in (select age from User_info where username = ?)
	        AND sex in (select age from User_info where sex = ? and password = ? and BIRTH_DATE = ?)
	    ]]>
	    </sql>
    </operation>
 
    <operation name="fromSubQuery" paramtype="primitive" multiplicity="one" remarks="根据订单号查询订单">
    	<sql>
	    <![CDATA[
	    SELECT USER_ID ,USERNAME ,PASSWORD ,BIRTH_DATE ,SEX ,AGE 
	        FROM (select * from user_info)
	    ]]>
	    </sql>
    </operation>
       
    <!-- 
    <operation name="subSelectWithOrderByClouse" paramtype="primitive" multiplicity="one" remarks="根据订单号查询订单">
    	<sql>
	    <![CDATA[
	    SELECT USER_ID ,USERNAME ,PASSWORD ,BIRTH_DATE ,SEX ,AGE 
	        FROM USER_INFO WHERE AGE in (select age from User_info order by age)
	    ]]>
	    </sql>
    </operation>
     -->

    <operation name="testSqlMap" paramtype="primitive" multiplicity="paging" remarks="根据订单号查询订单">
    	<sql>
	    <![CDATA[
	    select * from user_info where user_id = #userId#
	    ]]>
	    </sql>
	    <sqlmap>
	    <![CDATA[
	    select * from user_info where user_id = 123 /* sqlmap value */
	    ]]>	    	
	    </sqlmap>
    </operation>

    <operation name="testSqlMapWithParamsReplace" paramtype="primitive" multiplicity="paging" remarks="根据订单号查询订单">
    	<extraparams>
    		<param javatype="String" name="sexinsex"/>
    	</extraparams>
    	<sql>
	    <![CDATA[
	    select * from user_info where user_id = ? and password = ?
	    ]]>
	    </sql>
	    <sqlmap>
	    <![CDATA[
	    select * from user_info where user_id = #${param1}# and password = #${param2}# or sex = '${param3}'
	    ]]>	    	
	    </sqlmap>
    </operation>

    <operation name="testNotParameter" paramtype="primitive" multiplicity="one" remarks="根据订单号查询订单">
    	<sql>
	    <![CDATA[
	    SELECT <include refid="columns"/> FROM USER_INFO 
	    ]]>
	    </sql>
    </operation>
        
    <operation name="testIncludeByRefid" paramtype="primitive" multiplicity="one" remarks="根据订单号查询订单">
    	<sql>
	    <![CDATA[
	    SELECT <include refid="columns"/> 
	        FROM USER_INFO WHERE AGE = #age#  
	    ]]>
	    </sql>
    </operation>
    
    <operation name="testSelectColumnsWithQuery" paramtype="primitive" multiplicity="one" remarks="测试select中还有select">
		<sql>
			select USER_ID,USERNAME,(select password from user_info where password = #pwd_in_select_query# ) pwd_from_select_query
			from user_info
			where user_id = #userId#
		</sql>
	</operation>
	
	<sql id="columns"><![CDATA[ USER_ID ,USERNAME ,PASSWORD ,BIRTH_DATE ,SEX ,AGE  ]]></sql>    
	
	
	<operation name="testRoleJoinRolePermissionJoinBlog" paramtype="primitive" multiplicity="one" remarks="根据订单号查询订单">
    	<sql>
	    select * from role r 
	    	inner join role_permission rp on r.role_id = rp.role_id
	    	left join blog b on b.user_id = r.user_id
	    where 
	    	r.role_id = ? 
	    	and r.role_name = ?
	    </sql>
    </operation>  
    
	<operation name="testRoleJoinRolePermissionJoinBlogWithCustomParam" paramtype="primitive" multiplicity="one" remarks="根据订单号查询订单">
    	<sql>
	    select r.role_id,sum(r.user_id) sum_user_id from role r 
	    	inner join role_permission rp on r.role_id = rp.role_id
	    	left join blog b on b.user_id = r.user_id
	    where 
	    	r.role_id = ? 
	    	and r.role_name = ?
	    	and b.content like ?
	    	and r.modified between #modifiedBegin# and #modifiedEnd#
	    	group by r.role_id
	    </sql>
    </operation>        
    
	<operation name="testGroupByPaging"  multiplicity="paging" remarks="根据订单号查询订单">
    	<sql>
	    select r.role_id,sum(r.user_id) sum_user_id from role r 
	    	inner join role_permission rp on r.role_id = rp.role_id
	    	left join blog b on b.user_id = r.user_id
	    where 
	    	r.role_id = ? 
	    	and r.role_name = ?
	    	and b.content like ?
	    	and r.modified between #modifiedBegin# and #modifiedEnd#
	    	group by r.role_id
	    </sql>
    </operation>  
    
    <sql id="forSetOperationSql">
	    	inner join role_permission rp on r.role_id = rp.role_id
	    	left join blog b on b.user_id = r.user_id
	    where 
	    	r.role_id = ? 
	    	and r.role_name = ?
	    	and b.content like ?
	    	and r.modified between #modifiedBegin# and #modifiedEnd#
	    	group by r.role_id    
    </sql>
    
	<operation name="testSetOperations"  multiplicity="paging" remarks="根据订单号查询订单">
    	<sql>
    	select r.role_id,sum(r.user_id) sum_user_id from role r 
		<include refid="forSetOperationSql"/>
	    UNION 
	    select r.role_id,sum(r.user_id) sum_user_id from role r 
	    <include refid="forSetOperationSql"/>
	    UNION ALL
	    select r.role_id,sum(r.user_id) sum_user_id from role r 
	    <include refid="forSetOperationSql"/>
		MINUS 
	    select r.role_id,sum(r.user_id) sum_user_id from role r 
	    <include refid="forSetOperationSql"/>
	    EXCEPT  
	    select r.role_id,sum(r.user_id) sum_user_id from role r 
	    <include refid="forSetOperationSql"/>
	    INTERSECT   
	    select r.role_id,sum(r.user_id) sum_user_id from role r 
	    <include refid="forSetOperationSql"/>
	    /* h2不支持集合操作	    *//*
	    EXCEPT ALL  
	    select r.role_id,sum(r.user_id) sum_user_id from role r 
	    <include refid="forSetOperationSql"/>
	    INTERSECT ALL  
	    select role_id,sum(user_id) sum_user_id from role r 
	    <include refid="forSetOperationSql"/>
	    */	    
	    </sql>
    </operation>          		

	<operation name="testMybatisOrderByPagingWithIf"  multiplicity="paging" remarks="根据订单号查询订单">
    	<sql>
	    select r.role_id,sum(r.user_id) sum_user_id from role r 
	    	inner join role_permission rp on r.role_id = rp.role_id
	    	left join blog b on b.user_id = r.user_id
	    where 
	    	r.role_id = ? 
	    	and r.role_name = ?
	    	and b.content like ?
	    	and r.modified between #modifiedBegin# and #modifiedEnd#
	    	group by r.role_id
	   	    <if test="orderBy != null">
	   	    	order by r.role_id
	   	    </if>
		    <if test="orderBy == null">
		    	order by sum_user_id
			</if>
			<choose>
				<when test="orderby == '123'">
					order by r.role_id
				</when>
				<when test="orderby == '123'">
					order by r.role_id
				</when>
				<otherwise>
					order by r.role_id
				</otherwise>
			</choose>
	    </sql>
    </operation>    

	<operation name="testOpenClose"  multiplicity="paging" remarks="根据订单号查询订单">
    	<sql>
	    select r.role_id,sum(r.user_id) sum_user_id from role r 
	    	inner join role_permission rp on r.role_id = rp.role_id
	    	left join blog b on b.user_id = r.user_id
	    where 
	    	r.role_id = ? 
	    	and r.role_name = ?
	    	and b.content like ?
	    	and r.modified between #modifiedBegin# and #modifiedEnd#
	   	    and r.role_name in <isNotEmpty open="(" close=")"><iterate property="roleNames" conjunction=",">#roleNames[]#</iterate></isNotEmpty>
	    	group by r.role_id
	    </sql>
    </operation>  
    
    <operation name="testXmlEscape"  multiplicity="paging" remarks="测试xml escape">
    	<sql>
	    select * from role r 
	    where 
	    	r.role_id &lt; ? 
	    	and r.role_name &gt; ?
	    </sql>
    </operation> 
    
    <sql id="user_info.where">
	    	and username > #username#
	    	and password = #password#    
    </sql>

    <sql id="roleSecond.where">
	    	and username = #secondUsername#    
    </sql>   
    
    <sql id="duplication.where">
	    	and username > #username#
	    	and password = #password#   
	    	and username = #secondUsername#    
	    	and username = #noduplicationUsername#    
    </sql>     
    <operation name="testIncludeWhere"  multiplicity="paging" remarks="测试testIncludeWhere" paramtype="parameterObject">
    	<sql>
	    select * from user_info r 
	    where 1=1
			<include refid="user_info.where"/>
			<include refid="user_info.where"/>
			<include refid="roleSecond.where"/>
			<include refid="duplication.where"/>
	    </sql>
    </operation> 
    
    <operation name="testIncludeWhereWithNoPaging"  multiplicity="one" remarks="测试testIncludeWhere" paramtype="parameterObject">
    	<sql>
	    select * from user_info r 
	    where 1=1
			<include refid="user_info.where"/>
			<include refid="user_info.where"/>
			<include refid="roleSecond.where"/>
			<include refid="duplication.where"/>
	    </sql>
    </operation> 
    
	<operation name="countByUserId" paramtype="primitive" multiplicity="one" remarks="根据订单号查询订单">
		<sql>
			select count(*)
			from user_info
			where user_id = #userId#
		</sql>
	</operation>  
	
	<operation name="testMybatisForEach"  multiplicity="paging" remarks="根据订单号查询订单">
    	<sql>
	    select r.role_id,sum(r.user_id) sum_user_id from role r 
	    	inner join role_permission rp on r.role_id = rp.role_id
	    	left join blog b on b.user_id = r.user_id
	    	<where>
	    	r.role_id = ? 
	    	and r.role_name = ?
	    	and b.content like ?
	    	and r.modified between #modifiedBegin# and #modifiedEnd#
	    	and r.role_name in <foreach collection="array" open="(" close=")" item="item">#{item}</foreach>
	    	and r.role_name in <foreach collection="list" open="(" close=")" index="index">#{list[${index}]}</foreach>
			<if test="orderBy != null">
	   	    	and b.content = #{contentIf1}
	   	    </if>
		    <if test="orderBy == null">
		    	and b.content = #{contentIf2}
			</if>
			<choose>
				<when test="orderby == '123'">
					and b.content = #{contentIf3}
				</when>
				<when test="orderby == '123'">
					and b.content = #{contentIf4}
				</when>
				<otherwise>
					and b.content = #{contentIf5}
				</otherwise>
			</choose>	    	
	    	</where> 
	    	group by r.role_id
	    </sql>
    </operation>
    
	<operation name="insertWithNoSelectKey" paramtype="object" >
		<extraparams>
		    <param name="startRow" javatype="int"/>
		    <param name="pageSize" javatype="int"/>
		</extraparams>	
		<sql>
			INSERT INTO user_info (user_id,username,password) values (#user_id#,#username#,#password#)
		</sql>
	</operation>     	  
</table>

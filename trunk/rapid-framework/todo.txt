rapid-framework路线图

将project全部应用maven构建并如下项目划分,并且考虑是否需要支持 dao-module1,service-module2,web-module1,2,3,4
	project-generator
	project-common : common-util common-vo
	project-dao
	project-service
	project-web
为DAO层指定readonly/queryOnly属性，以禁止标准的insert update语句不能执行
使用设计来避免生成器代码的重复生成问题: 如BaseDao为自动生成 而Dao则为空架子用于编写业务逻辑
Page,PageRequest重构,PageRequest用于继承以替代filter
生成MockDao,MockManager以供调用
Dao.save() rename to Dao.insert()
支持一条sql语句生成操作，可以使用ZQL来解析sql
DAO层中orderby语句需要验证
# ibatis3 mapper.xml中增加 @Ognl@checkOrderby(orderby,'username,pwd')用于验证可以排序的列
#增加manual-${className}SqlMap.xml
__#日期类型的dao sql生成 dateBegin,dateEnd输入
#ibatis使用 pageSelect.count pageSelect.where 替换 count dynamicWhere
增加生成一个${Project}Exception用于区别不同的系统异常
UserManager.findByPageRequest() rename to UserManager.findPage
考虑是否将 springmvc的package.controller => package.web.controller
考虑将jsp继承的PageContext.setAttribute()修改为Request.setAttribute();
考虑在service中增加表单验证功能
为生成器提供一个generator变量,以供在模板里控制override,isGenerated等功能
生成器增加 column的 enum数据生成,如生成 BizTypeEnum
增加generator.getTable('tableName',Table.class,Column.class)以便可以让用户hack table对象
增加了exception package及web.enums
使用
	--dto
		--result
		--parameter
		--query
		--model
	--service
		--vo
			--result
			--parameter
			--query
				--result
			--model
		--iface
			--impl
	--dao
		--vo
			--query
				--result
			--model
		--iface
			--impl			
不要使用
	--dto
	--result
	--parameter
	--query

	//问题: 系统不能启动
	//错误提示: error_code:9959,error_detail:非法参数
	//操作(action): 验证身份, can null or lookupByErrorCode
	//原因(reason): 表单验证错误,可以lookupByErrorCodeAndAction
	//解决办法(fix): 请验证输入数据,可以lookupByErrorCodeAndAction
	
#session框架,可以将session存储在数据库,cache
#spring aspectjrt.jar升级至最新版本以适应不兼容jdk1.6的错误
#Freemarker中@extends指令中相对路径的处理。测试velocity中是否存在相同问题
#SQLServer2005Dialect不完善
#修改目录为标准的 java_src,java_test目录
#事务采用@Transactional处理，BaseManager增加，find，query,get的事务read-only

  #缓存抽象

spring xmlns to spring3.0.xsd
pipeline中如果不能找到模板的异常处理
继承体系中增加可以使用#includeOtherJspOrServlet('/header.jsp');
为spring rest增加 routes配置文件以解决spring不能使用welcome list的问题
add ScopeRenderArgsInterceptor.postHandle()用于将RenderArgs作为ModelAndView的模板变量
完成Flash Scope

为freemarker,velocity,jsp增加直接include其它http请求（包含local，remote request)
	示便: local: includer.include("/head.htm") 
	remote: includer.include("http://www.163.com"), 判断条件为以http开头 

生成器:
	#1.增加生成器的type mapping:
    #<typemap from="java.sql.Date" to="java.util.Date"/>
    #<typemap from="java.sql.Timestamp" to="java.util.Date"/>
    #<typemap from="java.math.BigDecimal" to="Long"/>
    #<typemap from="byte" to="Integer"/>
    #<typemap from="short" to="Integer"/>
    #实现 java_typemap.byte=Integer
    # java_typemap.short=Integer
     
     2.智能的解析properties,如将string "true" => boolean, "123" => integer
     
     3.支持从视图中生成数据,并增加视图的专有模板 template/view
     
     4.支持从sql query中生成数据, sql query可以作为一个文件储存起来 template/query

修改为UserManager.findByPageRequest(PageRequest<UserQuery> pr)

#flex权限控制
#	参考: http://code.google.com/p/flexible-chimp/
#	Enterprise security for Flex = http://www.adobe.com/devnet/flex/articles/flex_enterprise_security_03.html
	

生成器:
	增加通过一个查询得到列表界面的sql

	#实现模板引擎的pipeline处理模式:
	#即有一个layout.flt
	#<html>
	#   ${pipeline}
	#</html>
	#两种实现方式
	#1.其中${pileline}会自动include其它模板页面,其中模板名称通过变量pipeline_template_name= target.flt来传递
	#2.将另外一个模板的输出作为其它模板的一个输入,并将输出显示在${pipeline}标签的位置
	
	#3.可以为每一个模板定义一组管道
	#4.管理可以是一个数组,方法签名为
	#	1) pipeline(template,pipetemplate[],context,writer)
	#	2) pipeline(template,pipetemplate_queue,context,writer)
	#	3) pipeline(pipetemplate[],context,writer)
	#	4) String pipeline(template,pipetemplate[],context)
	#5.输出内容为最后一个管理的输出
	#6.以上管道只能重定义一个部分内容，所以可以结合模板的继承，自动实现多部分内容的重定义

#整合MailEngine
整合GroupProperties file,用于读取分组的配置文件

#fixed number NaN => 0 : NaN => Null
	https://bugs.adobe.com/jira/browse/BLZ-305
	http://flexblog.faratasystems.com/2010/01/09/custom-type-masrhaller-in-blazeds
	http://ajax.sys-con.com/node/1240225?page=0,1

BlazeDS学习
	MessageSerializer.writeObject()复杂对象的序列化
	AmfxOutput 负责 具体实现writeObject()方法
	AmfOutput的
		1.PropertyProxyRegistry为PropertyProxy的全局注册器
		2.writePropertyProxy()方法调用PropertyProxy的getPropertyNames()
	PropertyProxy 可以得到序列化的getPropertyNames()
	BeanProxy的includeReadOnly可以包含readOnly属性
	//AmfxInput中直接new BeanProxy()导致无法设置includeReadOnly属性

	注册所有Serializable.class都IncludeReadOnly beanProperties
		BeanProxy beanProxy = new BeanProxy();
		beanProxy.setIncludeReadOnly(true);
		PropertyProxyRegistry.getRegistry().register(Serializable.class, beanProxy);

#整合其它显示层技术
#	Ext2
增加列表组件
	Jmesa,SimpleList
整合SiteMesh

整合安全框架
	基于RBAC的SpringSecurity权限管理or 重复发明轮子rapid-security
数据访问层
	JPA
整合RichEditor
    FckEditor
寻找Tree组件

模板文件
	修改hiberante_xml使用CompositeId.java
#	增加简单版本的list.jsp,争取不喜欢extremeTable的用户
#	增加freemarker的CURD页面

rapid-validation
	3.ajax验证使用异步方式
插件相关
	支持plugin属性参数的修改
其它

	struts2 DirectResult对其它返回类型的支持,FreeMarker优先

	提供复杂模板，完成多表关联操作

	编写配置系统的ant脚本

	查询页跟列表也整合到一起

	Generator.generateAllTable()方法在Oracle不可用

	为Generator生成独立jar包,通过.bat文件运行生成代码,避免需要eclipse

	struts2重复提交，提示信息

	将<aop:advisor pointcut="execution(* com.*..*.service.*Manager.*(..))" advice-ref="txAdvice"/>
	替换为
	<aop:advisor pointcut="execution(* com.*..*.service.*Manager.*.*(..))" advice-ref="txAdvice"/>
	以可以拦截Manager的所有方法,并删除
	<aop:advisor pointcut="execution(* javacommon.base.BaseManager.*(..))" advice-ref="txAdvice"/>

